# vim:ft=zsh
# list contents right after changing directories
my_cd() {
    if [ "$1" ]
    then builtin cd "$1" && ls
    else builtin cd && ls
    fi
}

alias cd=my_cd

mkcd() {
    mkdir -p $1
    cd $1
}

# ..(), ...() for quickly changing $CWD {{{1
# http://www.shell-fu.org/lister.php?id=769

# Go up n levels:
# .. 3
function .. () {
    local arg=${1:-1};
    local dir=""
    while [ $arg -gt 0 ]; do
        dir="../$dir"
        arg=$(($arg - 1));
    done
    cd $dir >&/dev/null
}

# Go up to a named dir
# ... usr
function ... (){
    if [ -z "$1" ]; then
        return
    fi
    local maxlvl=16
    local dir=$1
    while [ $maxlvl -gt 0 ]; do
        dir="../$dir"
        maxlvl=$(($maxlvl - 1));
        if [ -d "$dir" ]; then
            cd $dir >&/dev/null
        fi
    done
}
# }}}

imagefixer () {
    for i in "$@"
    do
        convert "${i}" -auto-orient "${i}"
    done
}

spell() {
    echo $1 | aspell -a
}

sa() {
    eval file=\$$#
    SSHADD=$(which ssh-add)
    if [ -f ~/.ssh/$file ]; then
        args=''
        for i in "$@"; do
            if [ $i != $file ]; then
                args="$args $i"
            fi
        done
        $SSHADD $args ~/.ssh/$file
    else
        $SSHADD $@
    fi
}

# Output total memory currently in use by you {{{1
memtotal() {
    /bin/ps -u $(whoami) -o pid,rss,command | awk '{sum+=$2} END {print "Total " sum / 1024 " MB"}'
}
# }}}

itunespodcast() {
    curl -A 'iTunes/9.0.2 (Windows; Microsoft Windows XP Professional Service Pack 2 (Build 2600)) AppleWebKit/531.22.7' \
    $1 2>/dev/null | grep feedURL | sort -u
}

ml() { (echo "DEVICE PATH TYPE FLAGS" && mount | awk '$2=$4="";1') | column -t; }

#intercept calls to svn
svn() {
    #bail if the user didnt specify which subversion command to invoke
    if [ $# -lt 1 ]; then
        command svn
        return
    fi

    local sub_cmd=$1
    shift

    #intercept svn diff commands
    if [[ $sub_cmd =~ ^(di) ]]; then
        #colorize the diff
        #remove stupid ^M dos line endings
        #page it if there's more one screen
        command svn diff "$@" | colordiff | sed -e 's/\r//g' | less -RFSX

    #page some stuff I often end up paging manually
    elif [[ $sub_cmd =~ ^(status|log|blame|help)$ ]]; then
        command svn $sub_cmd $@ | less -FRSX

    #let svn handle it as normal
    else
        command svn $sub_cmd "$@"
    fi
}

reloaddb() {
    mysql=$(mysqlshow $1 >/dev/null 2>&1)$?
    pgsql=$(psql --list $1 >/dev/null 2>&1)$?
    if [ $mysql -eq 0 ]; then
        echo "Reloading mysql database $1";
        mysqladmin -f drop $1 && mysqladmin create $1 && zcat $2 | mysql $1;
    elif [ $pgsql -eq 0 ]; then
        echo "Reloading postgres database $1";
        dropdb $1 && createdb $1 && pg_restore --verbose --clean --no-acl --no-owner -d $1 $2;
    else
        echo "Unable to find db in mysql or postgres";
        return 1;
    fi
}

# modified from rvm
# Checks the .venv for the given directory. Note that if
# argument is passed, it will be used instead of pwd.
venv_project()
{
    export __venv_project_lock
    : __venv_project_lock:${__venv_project_lock:=0}
    : __venv_project_lock:$((__venv_project_lock+=1))
    if (( __venv_project_lock > 1 ))
    then return 0 # no nesting
    fi

    typeset working_dir

    # Get the first argument or the pwd.
    working_dir="${1:-"$PWD"}"

    while :
    do
        if [[ -z "$working_dir" || "$HOME" == "$working_dir" || "/" == "$working_dir" ]]
        then
            if [[ -n "${current_venv:-""}" ]]
            then
                deactivate
                if [[ -n "${venv_previous_environment:-""}" ]]
                then
                    workon "$venv_previous_environment"
                fi
                unset current_venv venv_previous_environment
            fi
            break
        else
            if [[ -f "$working_dir/.venv" ]]
            then
                if [[ "${current_venv:-""}" != "$working_dir/.venv" ]]
                then
                    venv_previous_environment="$(basename ${VIRTUAL_ENV:-""})"
                    current_venv="$working_dir/.venv"
                    workon $(cat $current_venv)
                    unset __venv_project_lock
                    return 0
                fi
                break
            else
                working_dir="$(dirname "$working_dir")"
            fi
        fi
    done

    unset __venv_project_lock
    return $?
}

chpwd_functions=( "${chpwd_functions[@]}" venv_project)
usechef() {
    if [ ! -d ~/.chef-$1 ]; then
        echo 'not a valid chef'
        readlink ~/.chef
        return 1
    fi
    rm ~/.chef
    ln -s ~/.chef-$1 ~/.chef
    readlink ~/.chef
}

change_wallpaper() {
    curl http://dev.dexterthedragon.com/wallpaper/ > /tmp/.wallpaper1.jpg 2>/dev/null && mv -f /tmp/.wallpaper1.jpg ~/.wallpaper1.jpg
    curl http://dev.dexterthedragon.com/wallpaper/ > /tmp/.wallpaper2.jpg 2>/dev/null && mv -f /tmp/.wallpaper2.jpg ~/.wallpaper2.jpg
}
