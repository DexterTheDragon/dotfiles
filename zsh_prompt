fpath=( ~/.zsh_functions $fpath )
[[ -d $HOME/.zsh_functions/VCS_Info ]] \
    && fpath[1]=( ${fpath[1]} ~/.zsh_functions/**/*~*/(CVS)#(/) )

autoload -U colors && colors
autoload -U promptinit
autoload -Uz vcs_info

local reset white gray green red yellow blue b_red
reset="%{${reset_color}%}"
white="%{$fg[white]%}"
gray="%{$fg_bold[black]%}"
green="%{$fg_bold[green]%}"
red="%{$fg[red]%}"
b_red="%{$fg_bold[red]%}"
yellow="%{$fg[yellow]%}"
b_yellow="%{$fg_bold[yellow]%}"
blue="%{$fg_bold[blue]%}"

zstyle ':vcs_info:*' enable git svn
zstyle ':vcs_info:git*:*' get-revision true
zstyle ':vcs_info:git*:*' check-for-changes true

zstyle ':vcs_info:svn*' formats "(%s) %b"
zstyle ':vcs_info:svn*' actionformats "(%s|${white}%a${gray}) %b"

zstyle ':vcs_info:git*' formats "(%s) %12.12i %c%u %b%m" # hash changes branch misc
zstyle ':vcs_info:git*' actionformats "(%s|${white}%a${gray}) %12.12i %c%u %b%m"

zstyle ':vcs_info:git*:*' stagedstr "${green}S${gray}"
zstyle ':vcs_info:git*:*' unstagedstr "${red}U${gray}"

zstyle ':vcs_info:git*+set-message:*' hooks git-st git-stash git-time-since-commit

# Show remote ref name and number of commits ahead-of or behind
function +vi-git-st() {
    local ahead behind remote
    local -a gitstatus

    # Are we on a remote-tracking branch?
    remote=${$(git rev-parse --verify ${hook_com[branch]}@{upstream} \
        --symbolic-full-name 2>/dev/null)/refs\/remotes\/}

    if [[ -n ${remote} ]] ; then
        # for git prior to 1.7
        # ahead=$(git rev-list origin/${hook_com[branch]}..HEAD | wc -l)
        ahead=$(git rev-list ${hook_com[branch]}@{upstream}..HEAD 2>/dev/null | wc -l)
        (( $ahead )) && gitstatus+=( "${green}+${ahead}${gray}" )

        # for git prior to 1.7
        # behind=$(git rev-list HEAD..origin/${hook_com[branch]} | wc -l)
        behind=$(git rev-list HEAD..${hook_com[branch]}@{upstream} 2>/dev/null | wc -l)
        (( $behind )) && gitstatus+=( "${red}-${behind}${gray}" )

        if [[ -n "${gitstatus}" ]]; then
            hook_com[branch]="${hook_com[branch]} [${remote} ${(j:/:)gitstatus}]"
        else
            hook_com[branch]="${hook_com[branch]} [${remote}]"
        fi
    fi
}

# Show count of stashed changes
function +vi-git-stash() {
    local -a stashes

    if [[ -s ${hook_com[base]}/.git/refs/stash ]] ; then
        stashes=$(git stash list 2>/dev/null | wc -l)
        hook_com[misc]+=" (${stashes} stashed)"
    fi
}

ZSH_THEME_GIT_TIME_SINCE_COMMIT_SHORT="%{$fg[green]%}"
ZSH_THEME_GIT_TIME_SHORT_COMMIT_MEDIUM="%{$fg[yellow]%}"
ZSH_THEME_GIT_TIME_SINCE_COMMIT_LONG="%{$fg[red]%}"
ZSH_THEME_GIT_TIME_SINCE_COMMIT_NEUTRAL="%{$fg_bold[black]%}"
# Determine the time since last commit. If branch is clean,
# use a neutral color, otherwise colors will vary according to time.
function +vi-git-time-since-commit() {
    if git rev-parse --git-dir > /dev/null 2>&1; then
        # Only proceed if there is actually a commit.
        if [[ $(git log 2>&1 > /dev/null | grep -c "^fatal: bad default revision") == 0 ]]; then
            # Get the last commit.
            last_commit=`git log --pretty=format:'%at' -1 2> /dev/null`
            now=`date +%s`
            seconds_since_last_commit=$((now-last_commit))

            # Totals
            MINUTES=$((seconds_since_last_commit / 60))
            HOURS=$((seconds_since_last_commit/3600))
            # Sub-hours and sub-minutes
            DAYS=$((seconds_since_last_commit / 86400))
            SUB_HOURS=$((HOURS % 24))
            SUB_MINUTES=$((MINUTES % 60))
            if [[ -n $(git status -s 2> /dev/null) ]]; then
                if [ "$MINUTES" -gt 30 ]; then
                    COLOR="$ZSH_THEME_GIT_TIME_SINCE_COMMIT_LONG"
                elif [ "$MINUTES" -gt 10 ]; then
                    COLOR="$ZSH_THEME_GIT_TIME_SHORT_COMMIT_MEDIUM"
                else
                    COLOR="$ZSH_THEME_GIT_TIME_SINCE_COMMIT_SHORT"
                fi
            else
                COLOR="$ZSH_THEME_GIT_TIME_SINCE_COMMIT_NEUTRAL"
            fi

            if [ "$HOURS" -gt 24 ]; then
                hook_com[misc]+=" ($COLOR${DAYS}d${SUB_HOURS}h${SUB_MINUTES}m%{$reset_color%})"
            elif [ "$MINUTES" -gt 60 ]; then
                hook_com[misc]+=" ($COLOR${HOURS}h${SUB_MINUTES}m%{$reset_color%})"
            else
                hook_com[misc]+=" ($COLOR${MINUTES}m%{$reset_color%})"
            fi
        fi
    fi
}

# Executed before each prompt
function precmd {
    vcs_info
    set_prompt
    set_rprompt
}

function set_prompt() {
    local -a lines infoline
    local x i filler i_width i_pad space

    ### First, assemble the top line
    # Current dir; show in yellow if not writable
    [[ -w $PWD ]] && infoline+=( ${blue} ) || infoline+=( ${b_red} )
    infoline+=( "%~${reset} " )

    # I want to know my battery percentage when running on battery power
    if which acpi &> /dev/null; then
        # local BATTSTATE="$(ibam --percentbattery)"
        # local BATTSTATE="$(acpi -b)"
        # local BATTPRCNT="${BATTSTATE[(f)1][(w)-2]}"
        local BATTPRCNT="$(acpi -b | awk '{print $4}' | cut -d% -f1)"
        # local BATTTIME="${BATTSTATE[(f)2][(w)-1]}"
        local BATTTIME="$(acpi -b | awk '{print $5}')"
        PR_BATTERY="B:${BATTPRCNT}%% "
        if [[ -n $BATTTIME ]]; then
            PR_BATTERY+="(${BATTTIME}) "
        fi
        if [[ "$(acpi -b | awk '{print $3}' | cut -d, -f1)" == "Charging" ]]; then
            PR_BATTERY="${green}${PR_BATTERY}"
        elif [[ "${BATTPRCNT}" -lt 15 ]]; then
            PR_BATTERY="${b_red}${PR_BATTERY}"
        elif [[ "${BATTPRCNT}" -lt 50 ]]; then
            PR_BATTERY="${b_yellow}${PR_BATTERY}"
        elif [[ "${BATTPRCNT}" -lt 100 ]]; then
            PR_BATTERY="${PR_BATTERY}"
        else
            PR_BATTERY=""
        fi
        infoline+=( "${PR_BATTERY}${reset}" )
    fi

    # show disk space
    space=$(command df -h -P ./ | grep -v Filesystem)
    infoline+=( "D:$(echo $space | awk '{print $5}')% ($(echo $space | awk '{print $4}')/$(echo $space | awk '{print $2}')) " )

    # Username & host
    infoline+=( "${green}%n" )
    [[ -n $SSH_CLIENT ]] && infoline+=( "@%m" )
    infoline+=( "${reset}" )

    i_width=${(S)infoline//\%\{*\%\}} # search-and-replace color escapes
    i_width=${#${(%)i_width}} # expand all escapes and count the chars

    filler="${gray}${(l:$(( $COLUMNS - $i_width ))::.:)}${reset}"
    infoline[2]=( "${infoline[2]} ${filler} " )

    local -a mpcline
    if which mpc &> /dev/null; then
        if [[ $(mpc 2>/dev/null | wc -l) > 1 ]]; then
            mpcline+=$(mpc current -f '[[%artist% - ]%title%]|[%name%]|[%file%]')
            mpcline+=$(mpc | head -n2 | tail -n1)

            i_width=${(S)mpcline//\%\{*\%\}} # search-and-replace color escapes
            i_width=${#${(%)i_width}} # expand all escapes and count the chars

            filler="${gray}${(l:$(( $COLUMNS - $i_width -5 )):: :)}${reset}"
            mpcline[1]=( "${mpcline[1]} ${filler} " )
        fi
    fi


    ### Now, assemble all prompt lines
    lines+=( ${(j::)infoline} )
    [[ -n ${mpcline} ]] && lines+=( "${reset}${mpcline}${reset}" )
    [[ -n ${vcs_info_msg_0_} ]] && lines+=( "${gray}${vcs_info_msg_0_}${reset}" )
    lines+=( "%(1j.${gray}%j${reset} .)%(0?.${white}.${red})%#${reset} " )

    ### Finally, set the prompt
    PROMPT=${(F)lines}
}

function set_rprompt() {
    local -a lines infoline
    local rvm

    rvm=$(~/.rvm/bin/rvm-prompt 2>/dev/null)
    if [ $rvm ]; then
        infoline+=( "rvm:$rvm" )
    fi
    if [ -n "$RUBY_ROOT" ]; then
        infoline+=( "chruby:$(basename $RUBY_ROOT)" )
    fi
    if [ -n "$RBFU_RUBY_VERSION" ]; then
        infoline+=( "rbfu:$RBFU_RUBY_VERSION" )
    fi
    if [[ -n $VIRTUAL_ENV ]]; then
        infoline+=( " venv:$(basename $VIRTUAL_ENV)" )
    fi

    lines+=( ${(j::)infoline} )

    if [[ -n $lines ]]; then
        RPROMPT="${white}${lines}${reset}"
    else
        RPROMPT=""
    fi
}
